#!/bin/sh
# https://github.com/basilioss/mdt

# Configuration ################################

dir="${MDT_DIR:-$PWD}"
inbox="${MDT_INBOX}"
color="${MDT_MAIN_COLOR:-5}"
prompt="${MDT_PROMPT:-◆}"
cursor="${MDT_CURSOR:-➔}"
item_width="${MDT_ITEM_WIDTH:-75}"
input_width="${MDT_INPUT_WIDTH:-65}"
file_editor="${MDT_EDITOR:-${EDITOR}}"

################################################

me="${0##*/}"
mdt_version="1.1.2"

print_help()
{
  printf %s "\
${me} - command-line markdown todo list manager

Usage
  ${me} [-d|--dir <arg>] [-i|--inbox <arg>] [--color <arg>]
  [--prompt <arg>] [--cursor <arg>] [--item-width <arg>]
  [--input-width <arg>] [--editor <arg>] [--version] [-h|--help]

Options
  -d, --dir           Path to the tasks directory
  -i, --inbox         Path to the inbox file
  --color             Main color
  --prompt            Input prompt character
  --cursor            Selection character
  --item-width        Todo items width
  --input-width       Input prompt width
  --editor            Markdown file editor
  --version           Print version
  -h, --help          Print help
"
exit 0
}

# Generated by argbash
parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "${_key}" in
      -d|--dir) dir="$2" && shift ;;
      --dir=*) dir="${_key##--dir=}" ;;
      -i|--inbox) inbox="$2" && shift ;;
      --inbox=*) inbox="${_key##--inbox=}" ;;
      --color) color="$2" && shift ;;
      --color=*) color="${_key##--color=}" ;;
      --prompt) prompt="$2" && shift ;;
      --prompt=*) prompt="${_key##--prompt=}" ;;
      --cursor) cursor="$2" && shift ;;
      --cursor=*) cursor="${_key##--cursor=}" ;;
      --item-width) item_width="$2" && shift ;;
      --item-width=*) item_width="${_key##--item-width=}" ;;
      --input-width) input_width="$2" && shift ;;
      --input-width=*) input_width="${_key##--input-width=}" ;;
      --editor) file_editor="$2" && shift ;;
      --editor=*) file_editor="${_key##--editor=}" ;;
      --version) printf "%s\n" "${me} ${mdt_version}" && exit ;;
      -h|--help) print_help ;;
      *) die "Got an unexpected argument '$1'" ;;
    esac
    shift
  done
}

create_file_if_missing() {
  _file="$1"
  _basename="$(basename "${_file}" .md)"

  if [ ! -f "${_file}" ]; then
    gum confirm \
      --selected.background="${color}" \
      --selected.foreground="#262626" \
      --prompt.padding="0 2" \
      "File does not exist, create?"
    if [ $? -eq 0 ]; then
      printf "%s\n\n" "# ${_basename}" > "${_file}"
    fi
  fi
}

get_file_with_checkboxes() {
  # If checkbox type isn't specified, use any
  # For example: [x] [ ] [-] [/] [>] [<] ...
  _checkbox_type="${1:-.}"
  _checkbox_pattern="^[[:space:]]*- \[${_checkbox_type}\]"

  if [ "${isPWD}" ]; then
    _files="$(ls -1 --sort=time -- *.md | tr "\n" "\0" \
      | xargs -0 grep -l "${_checkbox_pattern}")"
  else
    _files="$(find * -name '*.md' -not -path '*/.*' -print0 \
      | xargs -0 ls -1 --sort=time | tr "\n" "\0" \
      | xargs -0 grep -l "${_checkbox_pattern}")"
  fi

  [ -z "${_files}" ] && die "No todo files found"

  _file=$(printf "%s\n" "${_files}" \
    | gum filter --no-strict \
    --indicator="${cursor}" \
    --prompt="${prompt} " \
    --indicator.foreground="${color}" \
    --match.foreground="${color}")

  # Remove .md file extensions if exist
  [ "${_file##*.}" = "md" ] && _file="${_file%.*}"

  # Add path to the directory and file extension
  [ -n "${_file}" ] && _file="${dir}/${_file}.md" || exit

  # Don't create a new file if checkbox type is specified
  [ "${_checkbox_type}" = '.' ] && create_file_if_missing "${_file}"

  # Return path to the file
  [ -f "${_file}" ] && printf "%s\n" "${_file}"
}

list_open_todos() {
  [ -f "$1" ] && _file="$1" || exit

  if ! grep -qs "\- \[ \]" "${_file}"; then
    printf "%b\n" "Yey,\033[38;5;${color}m nothing\033[m left to do!" && exit
  fi

  _selected_items="$(grep "\- \[ ] " "${_file}" \
    | sed 's/^ \{0,1\}- \[ \] //g' \
    | sed 's/^[[:space:]]*- \[ \] /└─ /g' \
    | gum choose --no-limit \
    --item.width="${item_width}" \
    --cursor="${cursor} " \
    --cursor.foreground="${color}" \
    --selected.foreground="${color}" \
    --cursor-prefix "[ ] " \
    --selected-prefix "[✓] " \
    --unselected-prefix "[ ] ")"

  [ -z "${_selected_items}" ] && exit

  printf "%s\n" "${_selected_items}" | while read -r item; do
    escaped_item=$(printf '%s\n' "${item}" \
      | sed 's/└─ //g' \
      | sed 's/[*[\/&]/\\&/g')
    sed "s/\[ \] ${escaped_item}/\[x\] ${escaped_item}/g" \
      "${_file}" > "${_file}.bak" && mv "${_file}.bak" "${_file}"
  done
}

add_todo() {
  [ -f "$1" ] && _file="$1" || exit

  _line="$(grep --line-number --extended-regexp \
    "\- \[.?]" "${_file}" | cut -d: -f1 | head -1)"
  _todo="$(gum input --prompt="${prompt} " \
    --prompt.foreground="${color}" \
    --width="${input_width}" \
    --placeholder "Got something to do?")"

  [ -z "${_todo}" ] && exit
  if [ -z "${_line}" ]; then
    printf "%s\n" "- [ ] ${_todo}" >> "${_file}"
  else
    awk -v line="${_line}" -v todo="- [ ] ${_todo}" 'NR==line{print todo}1' \
      "${_file}" > "${_file}.bak" && mv "${_file}.bak" "${_file}"
  fi
}

edit_todo() {
  [ -f "$1" ] && _file="$1" || exit
  [ -z "${file_editor}" ] && die "No editor specified"
  eval "${file_editor}" "\"${_file}\""
}

die() {
  printf 'Error: %s.\n' "$1" >&2
  exit 1
}

# If inbox isn't specified, use default. 
# If it doesn't exist, ask to create.
set_inbox() {
  _default_inbox="${dir}/todo.md"
  inbox="${inbox:-$_default_inbox}"

  if [ ! -f "${inbox}" ]; then
    create_file_if_missing "${inbox}"
    [ -f "${inbox}" ] && printf "%s\n" "${inbox} has been successfully created"
    exit 0
  fi
}

main() {
  command -v gum > /dev/null || die "gum is required but not installed, exiting"
  parse_commandline "$@"

  if [ "${dir}" = "${PWD}" ]; then
    isPWD=true
  else
    cd "${dir}" || die "Directory does not exist"
  fi

  _choice="$(gum choose \
    --cursor.foreground="${color}" \
    --cursor="${cursor} " \
    "List inbox" "Add inbox" "List" "Add" "Edit")"

  case "${_choice}" in
    "List")
      list_open_todos "$(get_file_with_checkboxes ' ')"
      ;;
    "List inbox")
      set_inbox && list_open_todos "${inbox}"
      ;;
    "Add")
      add_todo "$(get_file_with_checkboxes)"
      ;;
    "Add inbox")
      set_inbox && add_todo "${inbox}"
      ;;
    "Edit")
      edit_todo "$(get_file_with_checkboxes)"
      ;;
  esac
}

main "$@"
