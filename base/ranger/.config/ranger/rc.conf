set preview_images true
set preview_images_method ueberzug
# ICONS
default_linemode devicons

set show_hidden true

###SETTINGS###
####!!!!!! REMEMBER TO CLONE DEVICONS

# set column_ratios 1,3,4
set column_ratios 1,1
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$
set show_hidden false
set confirm_on_delete multiple
set use_preview_script true
set automatically_count_files true
set open_all_images true
set vcs_aware false
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled
# set preview_images_method w3m
set unicode_ellipsis false
set show_hidden_bookmarks false
set colorscheme default
set preview_files true
set preview_directories true
set collapse_preview true
set save_console_history false
set status_bar_on_top false
set draw_progress_bar_in_status_bar true
set draw_borders false
set dirname_in_tabs true
set mouse_enabled true
set display_size_in_main_column true
set display_size_in_status_bar true
set display_tags_in_all_columns true
set update_title false
set update_tmux_title true
set shorten_title 3
set tilde_in_titlebar true
set max_history_size 20
set max_console_history_size 50
set scroll_offset 8
set flushinput true
set padding_right true
set autosave_bookmarks false
set autoupdate_cumulative_size false
set show_cursor false
set sort natural
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false
set xterm_alt_key false
set cd_bookmarks false
set preview_max_size 0
set show_selection_in_titlebar true
set idle_delay 2000
set metadata_deep_search false


####ALIASES###
#alias e    edit
#alias q    quit
#alias q!   quitall
#alias qa   quitall
#alias qall quitall
#alias setl setlocal
#
#alias filter     scout -prt
#alias find       scout -aeit
#alias mark       scout -mr
#alias unmark     scout -Mr
#alias search     scout -rs
#alias search_inc scout -rts
#alias travel     scout -aefiklst
#
####BASIC KEYS###
#
#BASIC
map     Q quit!
map     q quit
copymap q ZZ ZQ

##map R     reload_cwd
#map <C-r> reset
##map <C-l> redraw_window
#map <C-c> abort
#map <esc> change_mode normal
#
map i display_file
map ? help
#map W display_log
map w taskview_open
map S shell $SHELL

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %s
#map #  console shell -p%space
#map s  console shell%space
map r  chain draw_possible_programs; console open_with%%space
map f  console find%space
map cd console cd%space

## Tagging / Marking
#map at      tag_toggle
#map ut      tag_remove
#map "<any>  tag_toggle tag=%any
#map <Space> mark_files toggle=True
#map va       mark_files all=True toggle=True
#map uv      mark_files all=True val=False
#map vs       toggle_visual_mode
#map uV      toggle_visual_mode reverse=True
#
## For the nostalgics: Midnight Commander bindings
#map <F1> help
#map <F3> display_file
#map <F4> edit
#map <F5> copy
#map <F5> console shell echo "require(rmarkdown); render_site()" | R --vanilla
#map <F6> cut
#map <F7> console mkdir%space
#map <F8> console delete
#map <F10> exit
#
## VIM-like
#copymap <UP>       k
#copymap <DOWN>     j
#copymap <LEFT>     h
#copymap <RIGHT>    l
#copymap <HOME>     gg
#copymap <END>      G
#copymap <PAGEDOWN> <C-F>
#copymap <PAGEUP>   <C-B>
#
#map J  move down=0.5  pages=True
#map K  move up=0.5    pages=True
#copymap J <C-D>
#copymap K <C-U>
#
## Jumping around
#map H     history_go -1
#map L     history_go 1
#map ]     move_parent 1
#map [     move_parent -1
#map }     traverse
#
##DEFAULT MOVEMENT
#map ge cd /etc
#map gu cd /usr
##map gl cd -r .
#map gL cd -r %f
##map gv cd /var
#map gM cd /mnt
#map gr cd /
#map gR eval fm.cd(ranger.RANGERDIR)
#map g? cd /usr/share/doc/ranger
#
## Tabs
#map <C-n>     tab_new ~
#map <C-w>     tab_close
#map <TAB>     tab_move 1
#map <S-TAB>   tab_move -1
#map <A-Right> tab_move 1
#map <A-Left>  tab_move -1
##map gt        tab_move 1
##map gT        tab_move -1
#map gn        tab_new ~
##map gc        tab_close
#map tt tab_close
#map uq        tab_restore
#map <a-1>     tab_open 1
#map <a-2>     tab_open 2
#map <a-3>     tab_open 3
#map <a-4>     tab_open 4
#map <a-5>     tab_open 5
#map <a-6>     tab_open 6
#map <a-7>     tab_open 7
#map <a-8>     tab_open 8
#map <a-9>     tab_open 9
#
#
## External Programs
#map E  edit
#map du shell -p du --max-depth=1 -h --apparent-size
#map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
#map yp shell -f echo -n %%d/%%f | xsel -i; xsel -o | xsel -i -b
#map yd shell -f echo -n %%d     | xsel -i; xsel -o | xsel -i -b
#map yn shell -f echo -n %%f     | xsel -i; xsel -o | xsel -i -b
#
#
## Filesystem Operations
#map =  chmod
#map cw console rename%space
#map aa  rename_append
#map A  eval fm.open_console('rename ' + fm.thisfile.relative_path)
#map I  eval fm.open_console('rename ' + fm.thisfile.relative_path, position=7)
#map pp paste
#map po paste overwrite=True
#map pP paste append=True
#map pO paste overwrite=True append=True
#map pl paste_symlink relative=False
#map pL paste_symlink relative=True
#map phl paste_hardlink
#map pht paste_hardlinked_subtree
#
#map dD console delete
#
#map dd cut
#map ud uncut
#map da cut mode=add
#map dr cut mode=remove
#
#map yy copy
#map uy uncut
#map ya copy mode=add
#map yr copy mode=remove
#
#
## Temporary workarounds
#map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
#map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
#map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
#map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
#map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
#map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
#map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
#map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)
#
#
## Searching
#map /  console search%space
#map n  search_next
#map N  search_next forward=False
#map ct search_next order=tag
#map cs search_next order=size
#map ci search_next order=mimetype
#map cc search_next order=ctime
#map cm search_next order=mtime
#map ca search_next order=atime
#
#
## Sorting
#map or toggle_option sort_reverse
#map oz set sort=random
#map os chain set sort=size;      set sort_reverse=False
#map ob chain set sort=basename;  set sort_reverse=False
#map on chain set sort=natural;   set sort_reverse=False
#map om chain set sort=mtime;     set sort_reverse=False
#map oc chain set sort=ctime;     set sort_reverse=False
#map oa chain set sort=atime;     set sort_reverse=False
#map ot chain set sort=type;      set sort_reverse=False
#map oe chain set sort=extension; set sort_reverse=False
#
#map oS chain set sort=size;      set sort_reverse=True
#map oB chain set sort=basename;  set sort_reverse=True
#map oN chain set sort=natural;   set sort_reverse=True
#map oM chain set sort=mtime;     set sort_reverse=True
#map oC chain set sort=ctime;     set sort_reverse=True
#map oA chain set sort=atime;     set sort_reverse=True
#map oT chain set sort=type;      set sort_reverse=True
#map oE chain set sort=extension; set sort_reverse=True
#
#map dc get_cumulative_size
#
#
# Settings
map zc    toggle_option collapse_preview
map zd    toggle_option sort_directories_first
map zh    toggle_option show_hidden
map <C-h> toggle_option show_hidden
map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled
map zp    toggle_option preview_files
map zP    toggle_option preview_directories
map zs    toggle_option sort_case_insensitive
map zu    toggle_option autoupdate_cumulative_size
map zv    toggle_option use_preview_script
map zf    console filter%space
#
#
## Generate all the chmod bindings with some python help:
#eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))
#
#eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))
#
#
####CONSOLE KEYS###
## Basic
#cmap <tab>   eval fm.ui.console.tab()
#cmap <s-tab> eval fm.ui.console.tab(-1)
#cmap <ESC>   eval fm.ui.console.close()
#cmap <CR>    eval fm.ui.console.execute()
##cmap <C-l>   redraw_window
#
#copycmap <ESC> <C-c>
#copycmap <CR>  <C-j>
#
#
## Move around
#cmap <up>    eval fm.ui.console.history_move(-1)
#cmap <down>  eval fm.ui.console.history_move(1)
#cmap <left>  eval fm.ui.console.move(left=1)
#cmap <right> eval fm.ui.console.move(right=1)
#cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
#cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
#
#
## Line Editing
#cmap <backspace>  eval fm.ui.console.delete(-1)
#cmap <delete>     eval fm.ui.console.delete(0)
#cmap <C-w>        eval fm.ui.console.delete_word()
#cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
#cmap <C-k>        eval fm.ui.console.delete_rest(1)
#cmap <C-u>        eval fm.ui.console.delete_rest(-1)
#cmap <C-y>        eval fm.ui.console.paste()
#
## Note: There are multiple ways to express backspaces.  <backspace> (code 263)
## and <backspace2> (code 127).  To be sure, use both.
#copycmap <backspace> <backspace2>
#
## This special expression allows typing in numerals:
#cmap <allow_quantifiers> false
#
#
#
####PAGER KEYS###
## Movement
#pmap  <down>      pager_move  down=1
#pmap  <up>        pager_move  up=1
#pmap  <left>      pager_move  left=4
#pmap  <right>     pager_move  right=4
#pmap  <home>      pager_move  to=0
#pmap  <end>       pager_move  to=-1
#pmap  <pagedown>  pager_move  down=1.0  pages=True
#pmap  <pageup>    pager_move  up=1.0    pages=True
#pmap  <C-d>       pager_move  down=0.5  pages=True
#pmap  <C-u>       pager_move  up=0.5    pages=True
#
#copypmap <UP>       k  <C-p>
#copypmap <DOWN>     j  <C-n> <CR>
#copypmap <LEFT>     h
#copypmap <RIGHT>    l
#copypmap <HOME>     g
#copypmap <END>      G
#copypmap <C-d>      d
#copypmap <C-u>      u
#copypmap <PAGEDOWN> n  f  <C-F>  <Space>
#copypmap <PAGEUP>   p  b  <C-B>
#
#
## Basic
##pmap     <C-l> redraw_window
#pmap     <ESC> pager_close
#copypmap <ESC> q Q i <F3>
#pmap E      edit_file
#
## ===================================================================
## == Taskview Keybindings
## ===================================================================
#
## Movement
#tmap <up>        taskview_move up=1
#tmap <down>      taskview_move down=1
#tmap <home>      taskview_move to=0
#tmap <end>       taskview_move to=-1
#tmap <pagedown>  taskview_move down=1.0  pages=True
#tmap <pageup>    taskview_move up=1.0    pages=True
#tmap <C-d>       taskview_move down=0.5  pages=True
#tmap <C-u>       taskview_move up=0.5    pages=True
#
#copytmap <UP>       k  <C-p>
#copytmap <DOWN>     j  <C-n> <CR>
#copytmap <HOME>     g
#copytmap <END>      G
#copytmap <C-u>      u
#copytmap <PAGEDOWN> n  f  <C-F>  <Space>
#copytmap <PAGEUP>   p  b  <C-B>
#
## Changing priority and deleting tasks
#tmap J          eval -q fm.ui.taskview.task_move(-1)
#tmap K          eval -q fm.ui.taskview.task_move(0)
#tmap dd         eval -q fm.ui.taskview.task_remove()
#tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
#tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
#tmap <delete>   eval -q fm.ui.taskview.task_remove()
#
## Basic
##tmap <C-l> redraw_window
#tmap <ESC> taskview_close
#copytmap <ESC> q Q w <C-c>
#
#
#map sp console shell bash speedvid.sh %f%space
#map x shell chmod -x %s
#
##General
#map V console shell vim%space
#map cW bulkrename %s
#map mkd console mkdir%space
#map sc console shell ln -sT%space
#map D console delete
#map X shell atool -x %f
#map Z shell tar -cvzf %f.tar.gz %s
#map <C-f> fzf_select
#map <C-l> fzf_locate
