#!/bin/sh

# dependencies: sed curl mpv

prog="ani-cli"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"


help_text () {
	while IFS= read line; do
		printf "%s\n" "$line"
	done <<-EOF
	USAGE: $prog <query>
	 -h     show this help text
	 -d     download episode
	EOF
}


die () {
	printf "$c_red%s$c_reset\n" "$*" >&1
	exit 1
}

search_anime () {
	# get anime name along with its id
	search=$1
	titlepattern='<a href="/category/'

	curl -s "https://gogoanime.vc//search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
        #<a href="/category/one-punch-man" title="One Punch Man">
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "https://gogoanime.vc/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_links () {
	# get the download page url
	anime_id=$1
	ep_no=$2

	dpage_url=$(
	curl -s "https://gogoanime.vc/$anime_id-episode-$ep_no" |
	sed -n -E '
		/^[[:space:]]*<li class="dowloads">/{
		s/.*href="([^"]*)".*/\1/p
		q
		}')

	curl -s "$dpage_url" |
	sed -n -E '
		/^[[:space:]]*href="([^"]*\.mp4)".*/{
		s/^[[:space:]]*href="([^"]*\.mp4)".*/\1/p
		q
		}
		'
}

#####################
## Anime selection ##
#####################

is_download=0

while getopts 'hd' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
	esac
done

shift $((OPTIND - 1))

[ -z "$*" ] && { help_text ; die "Search query not provided";  }

query="$*"
search_results=$(search_anime "$query")

[ -z "$search_results" ] && die "No search results found"

# Creating menu

menu_format_string='[%d] %s\n'
menu_format_string_c1="$c_blue[$c_cyan%d$c_blue] $c_reset%s\n"
menu_format_string_c2="$c_blue[$c_cyan%d$c_blue] $c_yellow%s$c_reset\n"

count=1
while read anime_id; do
	# alternating colors for menu
	[ $((count % 2)) -eq 0 ] &&
		menu_format_string=$menu_format_string_c1 ||
		menu_format_string=$menu_format_string_c2

	printf "$menu_format_string" "$count" "$anime_id"
	count=$((count+1))
done <<EOF
$search_results
EOF

# User input
printf "$c_blue%s$c_green" "Enter number: "
read choice
printf "$c_reset"

# Check if input is a number
[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

# Select respective anime_id
count=1
while read anime_id; do
	if [ $count -eq $choice ]; then
		selection_id=$anime_id
		break
	fi
	count=$((count+1))
done <<EOF
$search_results
EOF

[ -z "$selection_id" ] && die "Invalid number entered"

##################
## Ep selection ##
##################
read last_ep_number <<EOF
$(search_eps "$selection_id")
EOF

printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
read ep_choice
printf "$c_reset"

[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"


while :; do

	if [ $ep_choice -lt 1 ] || [ $ep_choice -gt $last_ep_number ]; then
		die "Episode out of range"
	fi

	printf "Getting data for episode %d\n" $ep_choice

	video_url=$(get_links "$selection_id" "$ep_choice")

	case $video_url in
		*streamtape*)
			# If direct download not available then scrape streamtape.com
			BROWSER=${BROWSER:-firefox}
			printf "scraping streamtape.com\n"
			video_url=$(curl -s "$video_url" | sed -n -E '
				/^<script>document/{
				s/^[^"]*"([^"]*)" \+ '\''([^'\'']*).*/https:\1\2\&dl=1/p
				q
				}
			');;
	esac

	if [ $is_download -eq 0 ]; then
		setsid -f mpv "$video_url" >/dev/null 2>&1
	else
		printf "Downloading episode $ep_choice ...\n"
		printf "%s\n" "$video_url"
		{
			curl -L -# "$video_url" -o "${anime_id}-${ep_choice}.mp4" &&
				printf "\n${c_green}Downloaded episode: %s${c_reset}\n" "$ep_choice" ||
				printf "\n${c_red}Download failed episode: %s${c_reset}\n" "$ep_choice"
		}
	fi

	printf "\n${c_green}Currently playing %s episode ${c_cyan}%d/%d\n" "$selection_id" $ep_choice $last_ep_number
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "n" "next episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "p" "previous episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_red%s$c_reset\n" "q" "exit"
	printf "${c_blue}Enter choice:${c_green} "
	read choice
	printf "$c_reset"
	case $choice in
		n)
			ep_choice=$((ep_choice+1))
			;;
		p)
			ep_choice=$((ep_choice-1))
			;;
		q)
			break;;
		*)
			die "invalid choice"
			;;
	esac
done
